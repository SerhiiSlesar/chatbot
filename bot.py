from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from datetime import datetime
from fpdf import FPDF
import os
import json
from dotenv import load_dotenv

# Conversation states
(ASK_NAME, ASK_ADDRESS, ASK_DATE, COLLECT_WORK, CONFIRMATION) = range(5)

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GPT_API_KEY = os.getenv("OPENROUTER_API_KEY")


# Default work types and prices
WORK_PRICES = {
    "–ü—ñ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫–∏ (–≤–∏–±—É—Ä—é–≤–∞–Ω–Ω—è)": 80,
    "–ü—ñ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫–∏ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑ –≥—ñ–ø—Å–æ–º)": 50,
    "–®—Ç—Ä–æ–±–ª–µ–Ω–Ω—è (–±–µ—Ç–æ–Ω)": 100,
    "–ó–∞–º–∞–∑—É–≤–∞–Ω–Ω—è —à—Ç—Ä–æ–±–∏": 30,
    "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—é": 33,
    "–†–æ–∑–ø–æ–¥—ñ–ª—å—á–∞ –∫–æ—Ä–æ–±–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞)": 100,
    "–†–æ–∑–ø–æ–¥—ñ–ª—å—á–∞ –∫–æ—Ä–æ–±–∫–∞ (—Ä–æ–∑–ø–∞–π–∫–∞)": 150,
    "–ê–≤—Ç–æ–º–∞—Ç (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —ñ —Ä–æ–∑–∫–ª—é—á–µ–Ω–Ω—è)": 100,
    "–©–∏—Ç (–Ω—ñ—à–∞, 48 –º–æ–¥—É–ª—ñ–≤)": 800,
}

# Materials linked to works
MATERIALS = {
    "–ì—ñ–ø—Å (5 –∫–≥ –Ω–∞ 15 –ø—ñ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫—ñ–≤)": {
        "related_to": "–ü—ñ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫–∏ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑ –≥—ñ–ø—Å–æ–º)",
        "rate": 5 / 15,
        "price_per_kg": 20,
    },
    "–ö–∞–±–µ–ª—å –í–í–ì–Ω–≥ (–ø–æ–≥.–º)": {
        "related_to": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—é",
        "rate": 1,
        "price_per_m": 35,
    },
}

AUTHORIZED_USERS = [123456789]  # replace with your user_id


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in AUTHORIZED_USERS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –∞–∫—Ç –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç.\n\n–Ø–∫ –∑–≤–∞—Ç–∏ –∑–∞–º–æ–≤–Ω–∏–∫–∞?"
    )
    return ASK_NAME


async def ask_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±—ñ—Ç:")
    return ASK_ADDRESS


async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    keyboard = [["–°—å–æ–≥–æ–¥–Ω—ñ", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É"]]
    await update.message.reply_text(
        "–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±—ñ—Ç:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return ASK_DATE


async def collect_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–°—å–æ–≥–æ–¥–Ω—ñ":
        context.user_data["date"] = datetime.now().strftime("%d.%m.%Y")
    else:
        context.user_data["date"] = text
    context.user_data["works"] = {}
    keyboard = [[InlineKeyboardButton(w, callback_data=w)] for w in WORK_PRICES]
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥–∏ —Ä–æ–±—ñ—Ç (–ø–æ –æ–¥–Ω–æ–º—É):",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return COLLECT_WORK


async def collect_work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    work_type = query.data
    context.user_data["current_work"] = work_type
    await query.message.reply_text(f"–°–∫—ñ–ª—å–∫–∏ –æ–¥–∏–Ω–∏—Ü—å —Ä–æ–±–æ—Ç–∏: '{work_type}'?")
    return CONFIRMATION


async def save_work_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    qty = update.message.text
    if not qty.isdigit():
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ñ—Ä–æ—é.")
        return CONFIRMATION

    work = context.user_data.get("current_work")
    context.user_data["works"][work] = int(qty)

    keyboard = [[InlineKeyboardButton(w, callback_data=w)] for w in WORK_PRICES]
    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="done")])
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≤–∏–¥ —Ä–æ–±–æ—Ç–∏ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return COLLECT_WORK


async def finish_collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    summary = "üßæ –ê–∫—Ç –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç\n"
    summary += f"–î–∞—Ç–∞: {context.user_data['date']}\n"
    summary += f"–ó–∞–º–æ–≤–Ω–∏–∫: {context.user_data['name']}\n"
    summary += f"–ê–¥—Ä–µ—Å–∞: {context.user_data['address']}\n\n"

    total = 0
    for w, q in context.user_data["works"].items():
        price = WORK_PRICES[w]
        cost = price * q
        total += cost
        summary += f"{w}: {q} √ó {price} = {cost} –≥—Ä–Ω\n"

    summary += "\nüì¶ –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏:\n"
    materials_cost = 0
    for mat, props in MATERIALS.items():
        work_key = props["related_to"]
        if work_key in context.user_data["works"]:
            qty = context.user_data["works"][work_key] * props["rate"]
            if "price_per_kg" in props:
                cost = round(qty * props["price_per_kg"])
                summary += f"{mat}: {qty:.1f} –∫–≥ √ó {props['price_per_kg']} = {cost} –≥—Ä–Ω\n"
            else:
                cost = round(qty * props["price_per_m"])
                summary += f"{mat}: {qty:.1f} –º √ó {props['price_per_m']} = {cost} –≥—Ä–Ω\n"
            materials_cost += cost

    grand_total = total + materials_cost
    summary += f"\nüí∞ –†–æ–±–æ—Ç–∞: {total} –≥—Ä–Ω"
    summary += f"\nüßæ –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏: {materials_cost} –≥—Ä–Ω"
    summary += f"\nüî¢ –ó–∞–≥–∞–ª–æ–º: {grand_total} –≥—Ä–Ω"

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, summary)
    file_name = f"akt_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    pdf.output(file_name)

    await query.message.reply_text("–û—Å—å –≤–∞—à –∞–∫—Ç —É PDF:")
    await query.message.reply_document(document=InputFile(file_name))

    history_file = "history.json"
    record = {
        "date": context.user_data["date"],
        "name": context.user_data["name"],
        "address": context.user_data["address"],
        "works": context.user_data["works"],
        "total": total,
        "materials_total": materials_cost,
        "grand_total": grand_total,
        "file": file_name,
    }
    try:
        if os.path.exists(history_file):
            with open(history_file, "r", encoding="utf-8") as f:
                history = json.load(f)
        else:
            history = []
        history.append(record)
        with open(history_file, "w", encoding="utf-8") as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", e)

    context.user_data.clear()

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END


handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_address)],
        ASK_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
        ASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_date)],
        COLLECT_WORK: [
            CallbackQueryHandler(finish_collection, pattern="^done$"),
            CallbackQueryHandler(collect_work),
        ],
        CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_work_amount)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)


async def ask_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in AUTHORIZED_USERS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    if not context.args:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ü—Ä–∏–∫–ª–∞–¥: /ask_gpt –Ø–∫ –≤–∏–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç?"
        )
        return

    prompt = " ".join(context.args)
    await update.message.reply_text("ü§ñ –î—É–º–∞—é...")

    try:
        import requests

        headers = {
            "Authorization": f"Bearer {GPT_API_KEY}",
            "Content-Type": "application/json",
        }
        data = {
            "model": "openai/gpt-3.5-turbo",
            "messages": [{"role": "user", "content": prompt}],
        }
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data,
        )
        result = response.json()
        reply = result["choices"][0]["message"]["content"]
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ AI: {e}")


async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    history_file = "history.json"
    if not os.path.exists(history_file):
        await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    with open(history_file, "r", encoding="utf-8") as f:
        history = json.load(f)

    if not history:
        await update.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    message = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –∞–∫—Ç—ñ–≤:\n"
    for i, record in enumerate(history[-10:], 1):
        message += f"{i}. {record['date']} ‚Äî {record['name']} ‚Äî {record['total']} –≥—Ä–Ω\n"

    buttons = [
        [InlineKeyboardButton(f"–û—Ç—Ä–∏–º–∞—Ç–∏ PDF #{i}", callback_data=f"get_{i-1}")]
        for i in range(1, min(11, len(history) + 1))
    ]

    await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(buttons))


async def send_pdf_from_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = int(query.data.split("_")[1])
    history_file = "history.json"
    with open(history_file, "r", encoding="utf-8") as f:
        history = json.load(f)
    record = history[-10:][index]
    file_path = record["file"]
    if os.path.exists(file_path):
        await query.message.reply_document(document=InputFile(file_path))
    else:
        await query.message.reply_text("PDF —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")


async def main() -> None:
    if BOT_TOKEN is None:
        raise RuntimeError("TELEGRAM_BOT_TOKEN not set")

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("—ñ—Å—Ç–æ—Ä—ñ—è", show_history))
    application.add_handler(CommandHandler("ask_gpt", ask_gpt))
    application.add_handler(CallbackQueryHandler(send_pdf_from_history, pattern=r"^get_\d+$"))
    application.add_handler(handler)

    await application.run_polling()


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
